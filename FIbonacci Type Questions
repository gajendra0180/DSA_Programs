Problem Link: https://leetcode.com/problems/fibonacci-number/

Time complexity: O(1)
Space Complexity: O(1)

class Solution {
public:
    int fib(int n) {
        double a=(1+pow(5,0.5))/2.0;
        double b=(1-pow(5,0.5))/2.0;
        return (pow(a,n)-pow(b,n))/pow(5.0,.5);
    }
};


Problem Link: https://leetcode.com/problems/climbing-stairs/

Time complexity: O(1)
Space Complexity: O(1)

int climbStairs(int n) {
    n++;
    double root5 = pow(5, 0.5);
    double result = 1/root5*( pow((1+root5)/2, n) - pow((1-root5)/2, n) );
    return (int)(result);
}



Problem Link: https://leetcode.com/problems/min-cost-climbing-stairs/

Time complexity: O(n)
Space Complexity: O(1)



class Solution {
public:
    vector<int> v;
    map<int,int> m;
  
    int stair(int n)
    {
      vector<int> dp(n+1);
        dp[0]=0;dp[1]=0;
        for(int i=2;i<=n;i++)
        {
            dp[i%2]=min(v[i-1]+dp[(i-1)%2],(v[i-2]+dp[(i-2)%2]));
        }
        return dp[n%2];
    }
    int minCostClimbingStairs(vector<int>& cost) {
        v=cost;
        return stair(v.size());
    }
};
