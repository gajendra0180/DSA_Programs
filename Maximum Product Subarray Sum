Problem Link: https://leetcode.com/problems/maximum-product-subarray/


// 1d vectors
typedef std::vector<int> vi;
typedef std::vector<pair<int,int>> vii;
typedef std::vector<char> vc;
typedef std::vector<string> vs;

// 2d vector
typedef std::vector<vector<int>> vvi;
typedef std::vector<vector<char>> vvc;
typedef std::vector<vector<string>> vvs;

// 1d set
typedef std::set<int> si;
typedef std::set<char> sc;
typedef std::set<string> ss;

// map
typedef std::map<int,int> mii;
typedef std::map<char,int> mci;
typedef std::map<string,int> msi;
typedef std::map<pair<int,int>,int> miii;


// Pre Built Functions
//  1) Prime Sieve
bool prime_seive[1000010];
void prime_seive_func()
{
	bool flag;

	for(int i=0;i<=1000002;i++)
		prime_seive[i] = true;
	
	
	for(int i=2;i<=1000002;i++)
	{
		for(int j=i*i;j<=1000002;j+=i)
		{
			prime_seive[j-1] = false;
		}
	}

	prime_seive[0]=0;

/* How to use this sieve function
	First call prime_seive_func();
	Then next call cout<<prime_seive[n-1];
	=>This is for checking prime property of n.
	eg.For checking prime
	Property Of 29 do cout<<prime_seive[28];
*/

}


// #define
#define sync ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define f(i,x) for(auto i : x)
#define fdv(x) for(auto i : x)cout<<i<<" ";
#define fdm(x) for(auto i : x)cout<<i.first<<" "<<i.second<<endl;
#define fr(i,x) for(int i=0;i<x;i++)
#define pb(v,x) v.push_back(x)
#define len(s) s.size()
#define sort(v) sort(v.begin(),v.end())
#define reverse(v) reverse(v.begin(),v.end())
// #define find(v,x)  find(v.begin(),v.end(),x)
#define l_b(v,x) lower_bound(v.begin(),v.end(),x)
#define u_b(v,x) upper_bound(v.begin(),v.end(),x)
#define b_s(v,x) binary_search(v.begin(),v.end(),x)
#define in(x) cin>>x;
#define inn(x,y) cin>>x>>y;
#define innn(x,y,z) cin>>x>>y>>z;
#define innnn(x,y,z,a) cin>>x>>y>>z>>a;
#define innnnn(x,y,z,a,b) cin>>x>>y>>z>>a>>b;
#define vip(v,x) vi v;for(int i=0;i<x;i++){int a;cin>>a;v.push_back(a);}
#define pr(i) cout<<i
#define prr(i,j) cout<<i<<" "<<j
#define prrr(i,j,k) cout<<i<<" "<<j<<" "<<k
#define prrrr(i,j,k,l) cout<<i<<" "<<j<<" "<<k<<" "<<l
#define prn(i) cout<<i<<endl
#define prnn(i,j) cout<<i<<" "<<j<<endl
#define prnnn(i,j,k) cout<<i<<" "<<j<<" "<<k<<endl
#define prnnnn(i,j,k,l) cout<<i<<" "<<j<<" "<<k<<" "<<l<<endl
#define space cout<<" "
#define nl  cout<<endl
#define elif else if
#define meme(t) memset(t,-1,sizeof(t))
#define debug(x) cerr<<#x<<"	 "<<x<<endl;
// cout<<fixed<<setprecision(6);

class Solution {
public:
    int maxProduct(vector<int>& inp) {
        	if(inp.size()==1)
		return inp[0];
        	while(inp[0]==0)
		inp.erase(inp.begin());
        int maxx=INT_MIN;
	while(inp.back()==0)
		inp.erase(--inp.end());
	if(inp.size()==0)
		return 0;
	int finall=0;
	while(finall<inp.size())
	{
		vi v;
		while(finall<inp.size()&&inp[finall]!=0)
		{
			v.push_back(inp[finall]);
			finall++;
		}
		finall++;
		// fdv(v);
		// nl;
		int negative_numbers=0;
		f(i,v)
		{
			if(i<0)
				negative_numbers++;
		}
		if(negative_numbers%2==0)
		{
			int p=1;
			f(i,v)
			{
				if(i!=0)
					p*=i;
			}
			cout<<p<<endl;
            maxx=max(p,maxx);
		}
		else
		{
			//it's confirm that we have odd number of negative numbers and may or may not have some number of  zeroes
			int i=0,p=1;
			vector<int> prefix_prod;
			int first_negative_pos=-1,last_negative_pos=-1;
			while(i<v.size())
			{
				while(i<v.size()&&v[i]!=0)
				{
					if(v[i]<0)
					{
						if(first_negative_pos==-1)
							first_negative_pos=i;
						last_negative_pos=i;
					}
					p*=v[i];
					prefix_prod.push_back(p);
					i++;
				}
				if(i<v.size())
				{

				}
				else
				{
					int prod1=INT_MIN;
					int prod2=INT_MIN;
					if(last_negative_pos!=0)
						prod1=prefix_prod[last_negative_pos-1];
					if(first_negative_pos!=v.size()-1)
						prod2=prefix_prod.back()/prefix_prod[first_negative_pos];
					prnn(prod1,prod2);
                    if(prod1==prod2&&prod1==INT_MIN)
                        prod1=prod2=0;
                    maxx=max(maxx,max(prod1,prod2));
				}
			}
		}

	}
        return maxx;

    }
};
