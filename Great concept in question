Question link: https://codeforces.com/problemset/problem/180/C

This ques is simply a variant of the problem where we need to find the minimum number of operations required to make any half equal to 0 or 1

eg. we have 110100011 so we have to find the min operations to make either half as 1 and either half as 0
eg 111100000 or 000000011 have either half as 0 or 1

In this question we have to bring all the ones to the first half and all other zeroes to the second half.





#include "bits/stdc++.h"
using namespace std;
#pragma GCC target("avx2")
#pragma GCC optimization("O3")
#pragma GCC optimization("unroll-loops")
static auto _ = []()
{
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	return 0;
}();
#define sync ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define int long long int
typedef std::vector<int> vi;

//  1) modular-exponentiation-power-in-modular-arithmetic
int mod_power(int a, int b, int mod)
{
	if (b == 0)
	{
		return 1;
	}
	int ans = mod_power(a, b / 2, mod);
	ans *= ans;
	ans %= mod;
	if (b % 2)
	{
		ans *= a;
	}
	return ans % mod;
}

// 2 Global Mod
int global_mod(int x, int y)
{
	return (((x % y) + y) % y);
}

// 3  Exponentiation by squaring.Now you do not need to worry about preision or imperfect comparison between
//  integers or long and double which we used to have with the normal pow function of C++

int ipow(int base, int exp)
{
	int result = 1;
	for (;;)
	{
		if (exp & 1)
			result *= base;
		exp >>= 1;
		if (!exp)
			break;
		base *= base;
	}

	return result;
}

// #define

#define each(i, a) for (auto i : a)
#define repeat(i, start, end) for (int i = start; i < end; i++)
#define fdv(x)       \
	for (auto i : x) \
		cout << i << " ";
#define fdm(x)       \
	for (auto i : x) \
		cout << i.first << " " << i.second << endl;
#define pb(v, x) v.push_back(x)
#define len(s) s.size()
// #define sort(v) sort(v.begin(), v.end())
// #define reverse(v) reverse(v.begin(), v.end())
#define l_b(v, x) lower_bound(v.begin(), v.end(), x)
#define u_b(v, x) upper_bound(v.begin(), v.end(), x)
#define b_s(v, x) binary_search(v.begin(), v.end(), x)

// To perform read operation
template <class T>
void in(T &x) { cin >> x; }
void in(float &d)
{
	string t;
	in(t);
	d = stof(t);
}
void in(double &d)
{
	string t;
	in(t);
	d = stod(t);
}
void in(long double &d)
{
	string t;
	in(t);
	d = stold(t);
}
template <class A, class B>
void in(pair<A, B> &a)
{
	in(a.fr);
	in(a.sc);
}
template <class A>
void in(vector<A> &a) { each(i, a) in(i); }
template <class H, class... T>
void in(H &h, T &...t)
{
	in(h);
	in(t...);
}

// To perform write operation
string to_string(char c) { return string(1, c); }
string to_string(bool b) { return b ? "true" : "false"; }
string to_string(const char *s) { return string(s); }
string to_string(string s) { return s; }
template <class A, class B>
string to_string(pair<A, B> &a)
{
	return to_string(a.fr) + " " + to_string(a.sc);
}
template <class T>
void prr(T x) { cout << to_string(x); }
template <class H, class... T>
void prr(const H &h, const T &...t)
{
	prr(h);
	prr(t...);
}

void prn() { prr("\n"); }
template <class T>
void prn(vector<T> x)
{
	each(i, x)
	{
		prr(i);
		prr(" ");
	}
	prn();
}
template <class H, class... T>
void prn(const H &h, const T &...t)
{
	prr(h);
	if (sizeof...(t))
		prr(' ');
	prn(t...);
}

#define vip(v, x)               \
	vi v;                       \
	for (int i = 0; i < x; i++) \
	{                           \
		int a;                  \
		cin >> a;               \
		v.push_back(a);         \
	}

#define space cout << " "
#define nl cout << endl
#define elif else if
#define meme(t) memset(t, -1, sizeof(t))
#define mod 1000000007
#define debug(x) cerr << #x << "	 " << x << endl;
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) (a / (__gcd(a, b))) * b
#define endl "\n"
#define done cout << "Line " << __LINE__ << " is done" << endl;
#define dsc greater<int>()
//
//
//
//

void solve()
{
	string s;
	in(s);
	string n;
	each(i, s)
	{
		if (i >= 'a' && i <= 'z')
			pb(n, '0');
		else
			pb(n, '1');
	}
	vi zero, one;
	int onee = 0, zee = 0;
	for (auto i : n)
	{
		if (i == '1')
		{
			onee++;
			one.push_back(onee);
			zero.push_back(zee);
		}
		else
		{
			zee++;
			zero.push_back(zee);
			one.push_back(onee);
		}
	}
	prn(n);
	fdv(one);
	nl;
	fdv(zero);
	nl;
	int ans = one.back();
	for (int i = 0; i < len(s); i++)
	{
		ans = min(ans, (zero[i] + one[len(s) - 1] - one[i]));
	}
	prn(ans);
}

main()
{
	sync
#ifndef ONLINE_JUDGE
		freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	// int test;
	// in(test);
	// while (test--)
	(solve());
}
