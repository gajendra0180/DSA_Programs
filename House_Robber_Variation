https://leetcode.com/problems/house-robber/

class Solution {
public:
    vector<int> v;
    map<int,int> m;
    int maxSum(int n)
    {
        if(n<1)
            return 0;
        
        if(m.find(n)!=m.end())
            return m[n];
        
        return m[n] =  max(v[n-1]+maxSum(n-2),maxSum(n-1));
        
    }
    
    int rob(vector<int>& nums) {
        v=nums;
        return maxSum(nums.size());
    }
};



Now the Good part comes......See the question below:
https://leetcode.com/problems/delete-and-earn/

DO you find any realtion between both??Yeah You are correct!

They are basically the same :) 



Reducing this question to House Robber :-
This problem can be reduced to the house robber problem by storing the occurences of each number in
a frequency and then applying the logic of house robber on that array .

Eg - nums = [2,2,3,3,3,4]
count = [0,0,2,3,1]


The key here is we need to map each element to some value and store in array.Like in above we made like:
                        0->0
                        1->0
                        2->2
                        3->3
                        4->1
                       and thus made the array as [0,0,2,3,1]

class Solution {
public:
       vector<int> v;
    map<int,int> m;
    int maxSum(int n)
    {
        if(n<1)
            return 0;
        if(m.find(n)!=m.end())
            return m[n];
        return m[n] =  max(v[n-1]+maxSum(n-2),maxSum(n-1));
    }
    
    int deleteAndEarn(vector<int>& nums) {
     map<int,int> m1;
        int maxx=INT_MIN;
        for(auto i:nums)
        {
            if(i>maxx)
                maxx=i;
            m1[i]++;
        }
        vector<int> temp;
        for(int i=0;i<=maxx;i++)
        {
            temp.push_back(m1[i]*i);
        }
        for(auto i: temp)
            cout<<i<<" ";
        v=temp;
    return maxSum(temp.size());        
        
    }
};
